#!/usr/bin/env bash
_cpu() {
  docker stats --no-stream | grep resource-consumer | awk '{print $3}'
}

_mem() {
  docker stats --no-stream | grep resource-consumer | awk '{print $4,$5,$6}' | tr -d ' '
}

_dsk() {
  docker ps -s | grep resource-consumer | awk '{print $(NF-2),$(NF-1),$NF}'
}

_report_usage() {
  echo "CPU: $(_cpu)"
  echo "MEM: $(_mem)"
  echo "DSK: $(_dsk)"
}

_stop_container() {
  docker stop resource-consumer >/dev/null 2>&1 || true
  docker rm resource-consumer >/dev/null 2>&1 || true
}

_start_container() {
  docker run --name resource-consumer -d -p 8080:8080 dj80hd/resource-consumer
}

_test() {
  _stop_container
  _start_container
  sleep 1
  _report_usage
  _load
  sleep 1
  _report_usage
  sleep 5
  _report_usage
  _stop_container
  echo "Ok."
}

_host() {
  echo "${RC_HOST:-localhost:8080}"
}

_millicores() {
  [[ -z $1 ]] && { echo "Usage: _millicores <millicores> [<url>]"; return; }
  local host=${2:-$(_host)}
  local millicores=${1:-250}
  curl --data "millicores=${millicores}&durationSec=6000" ${host}/consume-cpu
}

_megabytes() {
  [[ -z $1 ]] && { echo "Usage: _megabytes <megabytes> [<url>]"; return; }
  local host=${2:-$(_host)}
  local megabytes=${1:-250}
  curl --data "megabytes=${megabytes}&durationSec=6000" ${host}/consume-mem
}

_load() {
  local host="${1:-localhost:8080}"
  curl --data "millicores=250&durationSec=600" ${host}/consume-cpu
  curl --data "megabytes=500&durationSec=600" ${host}/consume-mem
  curl --data "gigabytes=4&durationSec=5&filename=/var/log/rc-${RANDOM}.log" ${host}/consume-disk
  curl --data "metric=foo&delta=1.14&durationSec=300" ${host}/bump-metric
}

_deploy() {
  [[ -z $1 ]] && { echo "Usage: _deploy <namespace> [<replicas>]"; return; }
  local replicas=${2:-1}
  _yaml ${replicas} | kubectl apply -n $1 -f -
}

_delete() {
  [[ -z $1 ]] && { echo "Usage: _delete <namespace>"; return; }
  local ns=${1:-default}
  _yaml | kubectl delete -n $ns -f -
}

_yaml() {
  local replicas=${1:-1}
  cat <<EOF
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: resource-consumer
  name: resource-consumer
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: resource-consumer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: resource-consumer
  name: resource-consumer
spec:
  replicas: ${replicas}
  selector:
    matchLabels:
      app: resource-consumer
  template:
    metadata:
      name: resource-consumer
      labels:
        app: resource-consumer
    spec:
      containers:
      - image: dj80hd/resource-consumer
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: "/metrics"
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 10
        name: resource-consumer
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 0.10
            memory: 20M
          limits:
            cpu: 2
            memory: 4Gi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    uptake.run/repo: https://github.com/dj80hd/resource-consumer
  labels:
    app: resource-consumer
  name: resource-consumer
spec:
  rules:
  - host: resource-consumer.apps.infralab.mt2.uptake.run
    http:
      paths:
      - backend:
          serviceName: resource-consumer
          servicePort: 80
EOF
}
